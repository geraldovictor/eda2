Uma árvore binária é uma estrutura onde se tem uma raiz que
tem o endereço de memória do elemento do "meio", e do lado
direito temos os elementos de maiores valores e do lado esquerdo
temos os elementos de menores valores
temos também em cada no o endereço das nos que ficam à direita de
cada nó.

O primeiro nó é a raiz e o ultimo nó é a folha

A altura de uma arvore é a distancia do no raiz até as folhas

A profundidade é a distancia dos nos folhas até o no raiz

Para inicializar a arvore devemos fazer o raiz do no apontar para nulo
em seguida para adicionar criamos um novo nó que recebe como parâmetro
a chave dentro da criação de um no alocamos esse novo nó do tipo PONT
esse novo no tem que seus filhos apontam para nulo (filhos da direita e da esquerda)
e o valor que foi passado para essa função qe é o da chave
Para adicionar usamos uma função que vê se o elemento está apontando pra nulo
Se estiver quer dizer que é o primeiro elemento
Então essa função retorna o proprio no

-------------------------------------------------
Aula 16/08

algoritmo de ordenação estável:
é o que mantem ordem relativa dos elementos estável
ex: quando quero manter uma ordem alfabetica e em seguida ordenar pelos numeros

typedef int Item;
#define key(A) (A)
#define less(A,B) (key(A)<key(B))
#define exch(A,B)
#define compexch(A,B) {less(B,A)exch(A,B)}
void selectionSort(item *v, int l, int r){
int i;
  for(i=l; i<r ; i++){
    int menor=i;
    for(j=i+1; j<r ; j++){
      if(less(v[j],v[menor]))
        menor=j;
    }
    exch(v[menor], v[i]]);
  }
}

void insertionSortSimple(Item *V, int l, int r){
  int i , j;
  for(i=l+1; i<r; i++){
    for(j=i; j>l ;j--){
      compexch(v[j-1], v[j]);
    }
  }
}

void InsertionSort(Item *V, int l, int r){
  int i,j;
  for (i=r; i>=l; i--) compexch(v[i],v[i-1]);
  for (i=l+1; i<=r ; i++){
  Item menor = v[i], j=i;
    while(less(menor, v[j-1])){
      v[j]=v[j-1];
      j--;
    }
    v[j]=menor;
  }
}
como inserir os elementos ordenadamente

por exemplo 2 32 4 56 53 423 35 3 5

2 4 32

----------------------------------------------------------
aula 03 19/08

static int separa(int *V, int l, int r){ //função static equilave a private em relação a OO
  int c = v[r];
  int j=l ;
  for(int i=l; i <r ; i++){
  if(lesseq(V[i],c)) exch (v[i],v[j]);
  j++;
  /*se o valor da minha posição atual for menor ou igual a esse meu pivô
  soma 1 no contador
  senão joga esse elemento pra ultima se não
  */
  }
  exch(v[r], v[j]);
  return j;
}
quick não é estável
void quicksort(int *V, int l, int r){ // complexidade nlog n de casos médio , para aumentar a probabilidade de de ser n log n vc pega r, l e r+l/2 e usa a madianacomo pivô
  compexch(v[l],v[r]);//mediana
  compexch(v[(r+l/2),v[l]]);
  compexch(v[r],v[l]);
  if (ps> 2*lg(r)) return; // quando o elemento está demorando muito
  if(r-l>M){
    if(l<r){
      int j =separa(V,l,r);
      if(i-1-l> r- i +1){//qual caso tem menos elemento
        quicksort(V,l,j-1,ps+1);
        quicksort(V,j+1,r,ps+1);
      }else{
        quicksort(V,j+1,r,ps+1);
        quicksort(V,l,j-1,ps);
      }
    }
  }//else{
    //insertion(v,l,r);
  //}
}
void mediana(int *V, int l, int r){
  int j=separa(V,l,r);
  int meio = (l+r)/2;
  if(j>meio)
  mediana(V,l,j-1)
  else if(j<meio)
  mediana(V,j+1,r)
}

void selectionSort_r(Item *v, int l, int r ){
  if (l==r) return;

  int menor = acha_menor(v,l,l+1,r);
  exch(v[l], v[menor]);
  selectionSort_r(v,l+1,r);

}
int acha_menor(Item *v, int menor, int l, int r){
  if(l>r) return;
  if(less(v[l],v[menor])) menor =l;
  return acha_menor(v, menor, l+1, r);
}
void sort(Item *v, l,r){
  quicksort(v,l,r);
  insertion(v,l,r);
}

---------------------------
aula 26/08

void eec(int i, Item *v, int l, int r){
  compexch(v[l],v[r]);//mediana
  compexch(v((r+l/2),v[l]));
  compexch(v[r],v[l]);
  int j = separa(v,l,r);
  if(j==i) return;
  if(j<i) {
    eec(i,v,j+1,int r);
  }else{
    eec(i,v,l,j-1);
  }
}


// implementar achar os maiores ou menores em intervalos
// implementar os que mais aparecem mais da metade das vezes


void mergeAB(Item *c, Item *A, int M, Item *B, int N){
  /*
  int mesclado[M+N];
  if(M)
  for(int i =0 ; )
  */
  int k=0, i = 0, j =0;
  while(i<M&&j<N){
    if(lesseq(A[i],B[j])){
      c[k]=A[i]; i++ , k++;
    }else{
      c[k]=B[j]; j++, k++;
    }
  }
  while(i<M){
    c[k]=A[i];
    i++;
    k++;
  }
  while(i<N){
    c[k]=B[j];
    j++;
    k++;
  }
}
void merge(Item *v, int l, int meio , int r){
  Item *c = malloc(sizeof(Item)*(r-l+1));
  mergeAB(c,&v[l],(meio-l+1),&v[q+1],(r-(meio+1)+1);
  int k = 0; i =l;
  while(i<r-l+1){
    v[l]= c[i]; i++; l++;

  }
  free(c);
}
é ou não é estável
void mergeSort(Item *v, int l, int r){ //custo nlog n
  if(l==r) return;
  int meio =(l+r)/2;
  mergesort(v,l,meio);
  mergesort(v,meio+1,r);
  merge(v,l,meio,r);
}
um ponteiro para int tem 8 bytes
long d;// 8bytes
shorte 2 bytes;
int a: // 4 8bytes
char b; // 1 byte
int a , b;
short int *c=&a, *d = &b;

c[0]=3;
c[1]=8;
d[0]=7;
d[1]=4;

a
c[0]     c[1]
--------------
|  3   |  8  |
--------------
b
d[0]     d[1]
--------------
|  7   |  4  |
--------------

a = a+b;

void fqqr(int **a){
  a==0;
  if(a==NULL)
  *a=malloc(sizeof(int)*100);
}

int main(){
  int *x=NULL;
  fqqr(&x);
  printf("%d" x);
}

void mergeAB(int *c, int *a, int m, int *b, int m){
  int i=0, j=0,k=0;
  while(i<m &j<n){
    if(lesseq(a[i],b[j])) *c = a[i]; (c++) ; i++;
  }
}
quando usa o indice do vetor não precisa colocar *;

-----------------------------------------
Tabela Hash

Colisões são coisas que tem que acontecer(mesmo indice)

Algumas solução possíveis para tratar Colisões
criar listas encadeadas na posição em que há colisões
vetor proximo que estiver vazio (se tiver concentrado no final custa próximo de n)
outra tabela Hash
uma arvore binaria
